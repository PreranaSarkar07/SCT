# -*- coding: utf-8 -*-
"""SCT_ML_Task3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-CMwQKq-y1wg8kYjy6gxrxd-8a9NncqI
"""

from google.colab import files
files.upload()

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d tongpython/cat-and-dog

!unzip cat-and-dog.zip -d ./cats_and_dogs

import os

base_dir = "./cats_and_dogs"
print("Folders inside dataset:", os.listdir(base_dir))

train_dir = os.path.join(base_dir, "training_set")
test_dir = os.path.join(base_dir, "test_set")

print("Training classes:", os.listdir(train_dir))
print("Testing classes:", os.listdir(test_dir))

ls ./cats_and_dogs

ls ./cats_and_dogs/training_set

ls ./cats_and_dogs/test_set

train_data = []
train_data += load_images_from_folder("./cats_and_dogs/training_set/training_set/cats", 0)
train_data += load_images_from_folder("./cats_and_dogs/training_set/training_set/dogs", 1)

print("Total training samples:", len(train_data))

X = []
y = []

for features, label in train_data:
    X.append(features)
    y.append(label)

X = np.array(X)
y = np.array(y)

# Flatten the images (64x64x3 â†’ 12288)
X = X.reshape(len(X), -1)

print("Feature shape:", X.shape)
print("Labels shape:", y.shape)

from sklearn.model_selection import train_test_split

X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

print("Training set size:", X_train.shape)
print("Validation set size:", X_val.shape)

from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

# SVM Model
svm_model = SVC(kernel='linear', random_state=42)

# Train
svm_model.fit(X_train, y_train)

# Predict on validation set
y_pred = svm_model.predict(X_val)

# Accuracy
acc = accuracy_score(y_val, y_pred)
print("Validation Accuracy:", acc)

# Predict on test set
y_test_pred = svm_model.predict(X_test)

print("Test predictions ready:", len(y_test_pred))

import matplotlib.pyplot as plt
import random

for i in range(5):  # show 5 random images
    idx = random.randint(0, len(X_test)-1)
    img = X_test[idx].reshape(64,64,3)
    true_label = "Cat" if y_test[idx]==0 else "Dog"
    pred_label = "Cat" if y_test_pred[idx]==0 else "Dog"

    plt.imshow(img)
    plt.title(f"True: {true_label}, Pred: {pred_label}")
    plt.axis("off")
    plt.show()

